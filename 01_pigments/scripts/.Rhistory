Species == "Ipomoea_nil"	~ "Ipomoea_nil",
Species == "C_lupuliformis"	~ "Monogynella",
Species == "C_monogyna"	~ "Monogynella",
Species == "C_epithymum"	~ "Cuscuta",
Species == "C_purpurata"	~ "C_purpurata",
Species == "C_gracillima"	~ "Grammica",
Species == "C_indecora"	~ "Grammica",
Species == "C_californica"	~ "Grammica",
Species == "C_australis"	~ "Grammica",
Species == "C_cephalanthii"	~ "Grammica",
Species == "C_compacta"	~ "Grammica",
Species == "C_denticulata"	~ "Grammica",
Species == "C_polygonorum"	~ "Grammica",
Species == "C_sandwichiana"	~ "Grammica",
Species == "C_tasmanica"	~ "Grammica",
Species == "C_costaricensis"	~ "Grammica"), .before = Species) -> samples
# normalize to fresh weight, ng/mg FW
data_long %>% mutate(., FW.norm = ng*Conversion) -> data_long
#### normalize to fresh weight ####
# convert to long format
data_long <- gather(samples_naomit, Pigment, ng, a.Tocopherol:Car.Chl31, factor_key=TRUE)
# http://www.sthda.com/english/wiki/r-xlsx-package-a-quick-start-guide-to-manipulate-excel-files-in-r
# https://www.oracle.com/java/technologies/javase-jdk16-downloads.html
# library(rJava)
# library(xlsx)
library(tidyverse)
#### normalize to fresh weight ####
# convert to long format
data_long <- gather(samples_naomit, Pigment, ng, a.Tocopherol:Car.Chl31, factor_key=TRUE)
# add taxonomic subgenus column, except C. purpurata which is in Grammica but kept at species level
samples %>%
mutate(Subgenus = case_when(
Species == "Ipomoea_nil"	~ "Ipomoea_nil",
Species == "C_lupuliformis"	~ "Monogynella",
Species == "C_monogyna"	~ "Monogynella",
Species == "C_epithymum"	~ "Cuscuta",
Species == "C_purpurata"	~ "C_purpurata",
Species == "C_gracillima"	~ "Grammica",
Species == "C_indecora"	~ "Grammica",
Species == "C_californica"	~ "Grammica",
Species == "C_australis"	~ "Grammica",
Species == "C_cephalanthii"	~ "Grammica",
Species == "C_compacta"	~ "Grammica",
Species == "C_denticulata"	~ "Grammica",
Species == "C_polygonorum"	~ "Grammica",
Species == "C_sandwichiana"	~ "Grammica",
Species == "C_tasmanica"	~ "Grammica",
Species == "C_costaricensis"	~ "Grammica"), .before = Species) -> samples
# set levels to treatments
samples$Tissue.code <- factor(samples$Tissue.code, levels = c("l", "sdlg", "y", "o", "h", "f", "s"))
#### select ng pigments, remove peak.11.9 column, omit d-Tocopherol because no standard and it's in area not ng ####
samples %>% select( -peak.11.9) %>% select( -d.Tocopherol) %>% select(Date.Extracted:Chl.a, Car.Chl31) -> samples
#### remove erroneous rows ####
samples_naomit <- samples[!is.na(samples$Species), ]
#### normalize to fresh weight ####
# convert to long format
data_long <- gather(samples_naomit, Pigment, ng, a.Tocopherol:Car.Chl31, factor_key=TRUE)
# normalize to fresh weight, ng/mg FW
data_long %>% mutate(., FW.norm = ng*Conversion) -> data_long
#### create relevant ratios and pigment sums ####
# drop ng column
data_long %>% select(-ng) -> data_long
# convert to wide again for easier transformations of columns
data_wide <- spread(data_long, Pigment, FW.norm)
# add total chlorophyll column
data_wide %>% mutate(Tot.Chl = Chl.a + Chl.b) -> data_wide
# add chlorophyll ratio
data_wide %>% mutate(Chl.a.b = Chl.a/Chl.b) -> data_wide
# add total carotenoid
data_wide %>% mutate(Tot.Car = Violaxanthin + Neoxanthin + Antheraxanthin + Lutein + Zeaxanthin + a.Carotene + b.Carotene) -> data_wide
# add VAZ
data_wide %>% mutate(VAZ = Violaxanthin + Antheraxanthin + Zeaxanthin) -> data_wide
# add VAZ/Chl
data_wide %>% mutate(VAZ.Chl = VAZ/Tot.Chl) -> data_wide
# add VAZ/Car
data_wide %>% mutate(VAZ.Car = VAZ/Tot.Car) -> data_wide
# add NVZ
data_wide %>% mutate(NVZ = Neoxanthin + Violaxanthin + Zeaxanthin) -> data_wide
# add NVZ/Car
data_wide %>% mutate(NVZ.Car = NVZ/Tot.Car) -> data_wide
# add Lutein/Chl
data_wide %>% mutate(Lut.Chl = Lutein/Tot.Chl) -> data_wide
# add Lutein/Car
data_wide %>% mutate(Lut.Car = Lutein/Tot.Car) -> data_wide
# add Lutein epoxide/Car
data_wide %>% mutate(Lut.epo.Car = Lutein.epoxide/Tot.Car) -> data_wide
# add a.Carotene/Car
data_wide %>% mutate(a.Car.Car = a.Carotene/Tot.Car) -> data_wide
# add b.Carotene/Car
data_wide %>% mutate(b.Car.Car = b.Carotene/Tot.Car) -> data_wide
# add Zeaxanthin/Car
data_wide %>% mutate(Zea.Car = Zeaxanthin/Tot.Car) -> data_wide
# add Violaxanthin/Car
data_wide %>% mutate(Vio.Car = Violaxanthin/Tot.Car) -> data_wide
# add Neoxanthin/Car
data_wide %>% mutate(Neo.Car = Neoxanthin/Tot.Car) -> data_wide
# add Antheraxanthin/Car
data_wide %>% mutate(Ant.Car = Antheraxanthin/Tot.Car) -> data_wide
# add DEPS
data_wide %>% mutate(DEPS = (0.5*Antheraxanthin + Zeaxanthin)/VAZ) -> data_wide
# convert DEPS from fraction to %
data_wide$DEPS <- data_wide$DEPS*100
# convert data back to long
data_long_calcs <- gather(data_wide, Pigment, FW.norm, a.Tocopherol:DEPS, factor_key=TRUE)
# convert to long format
data_long <- gather(samples_naomit, Pigment, ng, a.Tocopherol:Car.Chl31, factor_key=TRUE)
# normalize to fresh weight, ng/mg FW
data_long %>% mutate(., FW.norm = ng*Conversion) -> data_long
# replace Inf with NA (for 0/0 ratios)
is.na(data_long_calcs$FW.norm) <- sapply(data_long_calcs$FW.norm, is.infinite)
# replace NaN with NA (for 0/0 ratios)
is.na(data_long_calcs$FW.norm) <- sapply(data_long_calcs$FW.norm, is.nan)
# omit rows that are NA in FW.norm
data_long_calcs %>% drop_na(FW.norm) -> data_long_calcs
# create table of just ipomoea lutein epoxide for correlation analysis
ipo_le <- data_long_calcs %>% filter(Species == "Ipomoea_nil") %>% filter(Pigment == "Lutein.epoxide")
# save a copy of this dataset
write.csv(ipo_le, file = "../output/stat_results/ipomoea_le.csv", row.names = F)
#### overall patterns stats ####
# is pigment composition different across subgenera (and tissues)?
# shapiro test for normality per pigment
data_long_calcs[sample(nrow(data_long_calcs), 5000), ] %>% ungroup() %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_sub
shapiro_sub %>%  add_significance("p") -> shapiro_sub
shapiro_sub
# kruskal wallace per pigment
data_long_calcs %>% ungroup() %>%
rstatix::kruskal_test(FW.norm ~ Subgenus, data = .) -> kruskal_sub
kruskal_sub
# ajust p-values
kruskal_sub$p.adj <- p.adjust(kruskal_sub$p, method = "BH", n = length(kruskal_sub$p))
kruskal_sub$p.adj.signif <- stars.pval(kruskal_sub$p.adj)
??
stars.pval
# library(colorBlindness)
# library(scales)
# library(car)
# library(mvnormtest)
# library(GGally)
library(gtools)
kruskal_sub$p.adj.signif <- stars.pval(kruskal_sub$p.adj)
# save a copy of this anova
write.csv(kruskal_sub, file = "../output/stat_results/kruskal_sub.csv", row.names = F)
# is pigment composition different across tissues (and subgenera)?
# shapiro test for normality per pigment
data_long_calcs[sample(nrow(data_long_calcs), 5000), ] %>% ungroup() %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_tiss
shapiro_tiss %>%  add_significance("p") -> shapiro_tiss
shapiro_tiss
# kruskal wallace tissues
data_long_calcs %>% ungroup() %>%
rstatix::kruskal_test(FW.norm ~ Tissue.code, data = .) -> kruskal_tiss
kruskal_tiss
# ajust p-values
kruskal_tiss$p.adj <- p.adjust(kruskal_tiss$p, method = "BH", n = length(kruskal_tiss$p))
kruskal_tiss$p.adj.signif <- stars.pval(kruskal_tiss$p.adj)
# save a copy of this anova
write.csv(kruskal_tiss, file = "../output/stat_results/kruskal_tiss.csv", row.names = F)
# is each pigment different across subgenera?
# shapiro test for normality per pigment
data_long_calcs %>% ungroup() %>%
group_by(Pigment) %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_perpigment_sub
shapiro_perpigment_sub %>%  add_significance("p") -> shapiro_perpigment_sub
shapiro_perpigment_sub
# kruskal wallace per pigment
data_long_calcs %>% ungroup() %>%
group_by(Pigment) %>%
rstatix::kruskal_test(FW.norm ~ Subgenus, data = .) -> kruskal_Subgenus_perpigment
kruskal_Subgenus_perpigment
# ajust p-values
kruskal_Subgenus_perpigment$p.adj <- p.adjust(kruskal_Subgenus_perpigment$p, method = "BH", n = length(kruskal_Subgenus_perpigment$p))
kruskal_Subgenus_perpigment$p.adj.signif <- stars.pval(kruskal_Subgenus_perpigment$p.adj)
# save a copy of this anova
write.csv(kruskal_Subgenus_perpigment, file = "../output/stat_results/kruskal_Subgenus_perpigment.csv", row.names = F)
#### all tissues x subgenera comparison, per pigment ####
# within each metric, test for differences among genera and among tissues. achieved using the metric__subgenus
# add a column with full tissue names spelled out
data_long_calcs$Tissue.code_names <- data_long_calcs$Tissue.code
plyr::revalue(data_long_calcs$Tissue.code_names, c("sdlg" = "Seedling", "l" = "Leaf", "y" = "Young", "o" = "Old", "h" = "Haustorium", "f" = "Flower", "s" = "Seed")) -> data_long_calcs$Tissue.code_names
# kruskal wallace per pigment by Subgenus.Tissue
data_long_calcs$Subgenus.Tissue <- paste0(data_long_calcs$Subgenus, "__", data_long_calcs$Tissue.code_names)
# kruskal wallace in loop, per pigment among all subgenera-tissues
kruskal_big_list <- list()
pigment_list <- unique(data_long_calcs$Pigment)
for(pig in pigment_list) {
data_loop_kruskal <- data_long_calcs %>% filter(Pigment == pig)
data_loop_kruskal$Tissue.code_names <- droplevels(data_loop_kruskal$Tissue.code_names)
rstatix::kruskal_test(FW.norm ~ Subgenus.Tissue, data = data_loop_kruskal) -> kruskal_big_list[[pig]]
}
# all highly sig, move on to post hoc
wilcox_big_list <- list()
pigment_list <- unique(data_long_calcs$Pigment)
for(pig in pigment_list) {
data_loop_wilcox <- data_long_calcs %>% filter(Pigment == pig)
data_loop_wilcox$Tissue.code_names <- droplevels(data_loop_wilcox$Tissue.code_names)
pairwise.wilcox.test(data_loop_wilcox$FW.norm, data_loop_wilcox$Subgenus.Tissue, p.adjust.method = "BH") -> wilcox_big_list[[pig]]
}
# export only plotted pigments
plotted_pigs <- c("Chl.a", "Chl.b", "Tot.Chl", "Chl.a.b", "VAZ", "Neoxanthin", "Lutein.epoxide", "Lutein", "a.Carotene", "b.Carotene", "Tot.Car", "NVZ.Car")
# format p-values, NAs, and column headers
excel_list <- list()
for(pig in plotted_pigs) {
sheet_loop <- wilcox_big_list[[pig]][["p.value"]]
rownames(sheet_loop) <- gsub(x = rownames(sheet_loop), pattern = "__", replacement = ".Tissue.")
colnames(sheet_loop) <- gsub(x = colnames(sheet_loop), pattern = "__", replacement = ".Tissue.")
rownames(sheet_loop) <- gsub(x = rownames(sheet_loop), pattern = "_", replacement = ". ")
colnames(sheet_loop) <- gsub(x = colnames(sheet_loop), pattern = "_", replacement = ". ")
sheet_loop[is.na(sheet_loop)] <- "-"
rownames(sheet_loop) <- gsub(x = rownames(sheet_loop), pattern = ".Tissue.", replacement = "__")
colnames(sheet_loop) <- gsub(x = colnames(sheet_loop), pattern = ".Tissue.", replacement = "__")
rbind(colnames(sheet_loop), sheet_loop) -> sheet_loop
cbind(rownames(sheet_loop), sheet_loop) -> sheet_loop
setNames(rbind(names(sheet_loop), sheet_loop), names(sheet_loop)) -> sheet_loop
sheet_loop <- separate(as.data.frame(sheet_loop), 1, into = c("Subgenus", "Tissue"), sep = "__")
sheet_loop <- as.data.frame(data.table::transpose(sheet_loop))
sheet_loop <- separate(sheet_loop, 1, into = c("Subgenus", "Tissue"), sep = "__")
sheet_loop <- data.frame(lapply(sheet_loop, function(x) {gsub("Ipomoea.", "Ipomoea", x)}))
sheet_loop <- data.table::transpose(sheet_loop)
excel_list[[pig]] <- sheet_loop
}
warnings()
# save pairwise wilcox test with a different sheet for each pigment
write.xlsx(excel_list[["Chl.a"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Chl.a", row.names=FALSE, col.names=FALSE)
# save pairwise wilcox test with a different sheet for each pigment
write.xlsx(excel_list[["Chl.a"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Chl.a", row.names=FALSE, col.names=FALSE)
# http://www.sthda.com/english/wiki/r-xlsx-package-a-quick-start-guide-to-manipulate-excel-files-in-r
# https://www.oracle.com/java/technologies/javase-jdk16-downloads.html
# library(rJava)
library(xlsx)
# save pairwise wilcox test with a different sheet for each pigment
write.xlsx(excel_list[["Chl.a"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Chl.a", row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Chl.b"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Chl.b", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Tot.Chl"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Tot.Chl", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Chl.a.b"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Chl.a.b", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["VAZ"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="VAZ", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Neoxanthin"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Neoxanthin", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Lutein.epoxide"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Lutein.epoxide", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Lutein"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Lutein", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["a.Carotene"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="a.Carotene", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["b.Carotene"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="b.Carotene", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["Tot.Car"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="Tot.Car", append=TRUE, row.names=FALSE, col.names=FALSE)
write.xlsx(excel_list[["NVZ.Car"]], file="../output/stat_results/pairwise_allpigsxtissues.xlsx", sheetName="NVZ.Car", append=TRUE, row.names=FALSE, col.names=FALSE)
# some pigs were causing an error because it is 0 across all tissues in this species
# i identified them manually with:
data_long_calcs %>% group_by(Pigment, Subgenus) %>% summarise(mean = mean(FW.norm)) %>% filter(mean == 0) -> test_means
# some pigs were causing an error because in that pigment x subgenus combo there was only 1 tissue
# i identified them manually with:
data_long_calcs %>% na.omit() %>% group_by(Pigment, Subgenus, Tissue.code) %>% summarize(mean = mean(FW.norm)) %>% summarize(n = n()) %>% filter(n == 1) -> test_tissues
# shapiro test for normality per pigment per subgenus
data_long_calcs %>% ungroup() %>% filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>% filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_pig_sub
# shapiro test for normality per pigment per subgenus
data_long_calcs %>% ungroup() %>% filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>% filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_pig_sub
View(data_long_calcs)
data_long_calcs %>% ungroup() %>% filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>% filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus)
data_long_calcs %>% ungroup() %>% filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>% filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) -> test
View(test)
View(test_tissues)
View(test_means)
test_means
test_tissues
# shapiro test for normality per pigment per subgenus
# removing those combos with all 0s
data_long_calcs %>% ungroup() %>%
filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>%
filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>%
filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>%
filter(!(Pigment == "Neo.Car" & Subgenus == "C_purpurata")) %>%
filter(!(Pigment == "Neo.Car" & Subgenus == "Cuscuta")) %>%
filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) %>%
rstatix::shapiro_test(FW.norm, data = .) -> shapiro_pig_sub
shapiro_pig_sub %>%   add_significance("p") -> shapiro_pig_sub
shapiro_pig_sub
# kruskal wallace per pigment per subgenus
data_long_calcs %>% ungroup() %>% filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>% filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>% filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) %>%
rstatix::kruskal_test(FW.norm ~ Tissue.code, data = .) -> kruskal_Tissue_pig_sub
# kruskal wallace per pigment per subgenus
data_long_calcs %>% ungroup() %>%
filter(!(Pigment == "a.Tocopherol" & Subgenus == "Monogynella")) %>%
filter(!(Pigment == "Neoxanthin" & Subgenus == "C_purpurata")) %>%
filter(!(Pigment == "Neoxanthin" & Subgenus == "Cuscuta")) %>%
filter(!(Pigment == "Neo.Car" & Subgenus == "C_purpurata")) %>%
filter(!(Pigment == "Neo.Car" & Subgenus == "Cuscuta")) %>%
filter(!(Pigment == "Chl.a.b" & Subgenus == "C_purpurata")) %>%
group_by(Pigment, Subgenus) %>%
rstatix::kruskal_test(FW.norm ~ Tissue.code, data = .) -> kruskal_Tissue_pig_sub
kruskal_Tissue_pig_sub
# ajust p-values
kruskal_Tissue_pig_sub$p.adj <- p.adjust(kruskal_Tissue_pig_sub$p, method = "BH", n = length(kruskal_Tissue_pig_sub$p))
kruskal_Tissue_pig_sub$p.adj.signif <- stars.pval(kruskal_Tissue_pig_sub$p.adj)
# save a copy of this anova
write.csv(kruskal_Tissue_pig_sub, file = "../output/stat_results/kruskal_Tissue_pig_sub.csv", row.names = F)
# filter for signficant pigments x main effects for posthoc comparisons, but round p-values first
kruskal_Tissue_pig_sub$p.adj <- kruskal_Tissue_pig_sub$p.adj %>% p_round(digits = 3)
kruskal_Tissue_pig_sub_sig <- as.data.frame(kruskal_Tissue_pig_sub) %>% dplyr::filter(p.adj <= 0.05)
# perform posthoc pairwise comparisons on the sig anovas
# first create a vector on which to filter data_long_calcs by
kruskal_Tissue_pig_sub_sig_vector <- paste0(kruskal_Tissue_pig_sub_sig$Subgenus, "__", kruskal_Tissue_pig_sub_sig$Pigment)
# create a combined column in data_long_calcs too
data_long_calcs$Subgenus.Pigment <- paste0(data_long_calcs$Subgenus, "__", data_long_calcs$Pigment)
# filter data long calcs by the Subgenus.Pigment column, based on vector
filter(data_long_calcs, Subgenus.Pigment %in% kruskal_Tissue_pig_sub_sig_vector) -> only_sig_pig
only_sig_pig$Pigment <- droplevels(only_sig_pig$Pigment)
subgenuspigment_list <- unique(only_sig_pig$Subgenus.Pigment)
only_sig_pig$log.FW.norm <- log(only_sig_pig$FW.norm)
wilcox_list <- list()
for(subpig in subgenuspigment_list) {
data_loop_wilcox <- only_sig_pig %>% filter(Subgenus.Pigment == subpig)
data_loop_wilcox$Tissue.code <- droplevels(data_loop_wilcox$Tissue.code)
data_loop_wilcox$Pigment <- droplevels(data_loop_wilcox$Pigment)
pairwise.wilcox.test(data_loop_wilcox$FW.norm, data_loop_wilcox$Tissue.code, p.adjust.method = "BH") -> wilcox_list[[subpig]]
}
# create a dataframe using the kruskal wallace results
dat_text_plot_kruskal <- kruskal_Tissue_pig_sub[, c("Subgenus", "Pigment", "method", "p.adj")]
# add equal sign to p.adj
dat_text_plot_kruskal$p.adj_eq <- paste0(" = ", dat_text_plot_kruskal$p.adj)
dat_text_plot_kruskal$label <- paste0('paste(italic("P"),"', dat_text_plot_kruskal$p.adj_eq, "\")")
dat_text_plot_kruskal <- dat_text_plot_kruskal %>% select(Subgenus, Pigment, label)
dat_text_plot_kruskal$Subgenus <- factor(dat_text_plot_kruskal$Subgenus,
levels = c("Ipomoea_nil",
"Monogynella",
"Cuscuta",
"C_purpurata",
"Grammica"),
labels = c("Ipomoea nil",
"Monogynella",
"Cuscuta",
"C. purpurata",
"Grammica"))
# save a copy of this plot text df
write.csv(dat_text_plot_kruskal, file = "../output/stat_results/dat_text_plot_kruskal.csv", row.names = F)
summary_accession <- data_long_calcs %>%
group_by(Subgenus, Species, Accession.No, Tissue.code, Pigment)  %>%
dplyr::summarize(Mean = mean(FW.norm, na.rm = TRUE), n = sum(!is.na(FW.norm)), sd = sd(FW.norm, na.rm = TRUE))
# replace NaN with NA (for 0/0 ratios)
is.na(summary_accession$Mean) <- sapply(summary_accession$Mean, is.nan)
# write to csv
write_csv(summary_accession, file = "../output/stat_results/pigments_species_summary.csv")
# summary stats per subgenus x tissue x pigment: mean, n, and std dev
summary_subgenus <- data_long_calcs %>%
group_by(Subgenus, Tissue.code, Pigment)  %>%
dplyr::summarize(Mean = mean(FW.norm, na.rm = TRUE), n = sum(!is.na(FW.norm)), sd = sd(FW.norm, na.rm = TRUE))
# replace NaN with NA (for 0/0 ratios)
is.na(summary_subgenus$Mean) <- sapply(summary_subgenus$Mean, is.nan)
# write to csv
write_csv(summary_subgenus, file = "../output/stat_results/pigments_subgenus_summary.csv")
# convert FW.norm to log(FW.norm) for plotting (when necesary), when > 0
data_long_calcs$logFW.norm <- log(data_long_calcs$FW.norm + 0.0000001)
data_long_calcs$logFW.norm <- ifelse(data_long_calcs$logFW.norm < 0, 0, data_long_calcs$logFW.norm)
# write this to csv for plotting
write_csv(data_long_calcs, file = "../output/stat_results/data_long_calcs_for_plots.csv")
# load data
data_long_calcs <- read.csv(file = "../output/stat_results/data_long_calcs_for_plots.csv")
View(data_long_calcs)
#### Chl.a Ipomoea_nil ####
data_ipomoea <-  filter(data_long_calcs, Subgenus == "Ipomoea_nil")
data_ipomoea_Chl.a <- filter(data_ipomoea, Pigment == "Chl.a")
# drop unused factor levels from tissues (e.g. haustorium from Ipomoea)
data_ipomoea$Tissue.code <- factor(data_ipomoea$Tissue.code, levels = c("l", "y", "o", "f", "s"))
Chl.a_ipomoea_boxplot <- ggplot(data_ipomoea_Chl.a, aes(x=Tissue.code, y=logFW.norm, color=Tissue.code)) +
scale_fill_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_color_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_x_discrete(name = "Tissue", labels = c("l" = "L", "y" = "Y", "o" = "O", "f" = "F", "s" = "Sd"), drop = FALSE) +
geom_boxplot(outlier.size = 0.1, lwd=0.2) +
theme_minimal() +
theme(text = element_text(size=10),
strip.text.x = element_text(angle=0, face = "bold"),
strip.text.y.left = element_text(angle = 0, face = "bold"),
axis.text.y = element_text(size = 5),
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 5),
legend.position = "none") +
ylab("Log10 ng/mg Fresh Weight") +
guides(colour = guide_legend(nrow = 1)) +
scale_y_continuous(position = "left", limits = c(0, 8), breaks = seq(0, 8, by = 2)) +
geom_text(
size    = 2,
color = "black",
data    = filter(dat_text_plot_kruskal, Pigment == "Chl.a" & Subgenus == "Ipomoea nil"),
inherit.aes = T,
mapping = aes(x = Inf, y = Inf, label = label, vjust = "top", hjust = "right"),
nudge_y = -.6, parse = TRUE)
leaf<-"#24ff24" #Harlequin
young<-"orange"
old<-"#924900" #Brown
haustorium<- "red"
seedling<-"#009292" #PersianGreen
flower<-"#ff6db6" #HotPink
fruit<-"#ffff6d" #LaserLemon
seed<- "#6db6ff" #Malibu
# load data
data_long_calcs <- read.csv(file = "../output/stat_results/data_long_calcs_for_plots.csv")
#### Chl.a Ipomoea_nil ####
data_ipomoea <-  filter(data_long_calcs, Subgenus == "Ipomoea_nil")
data_ipomoea_Chl.a <- filter(data_ipomoea, Pigment == "Chl.a")
# drop unused factor levels from tissues (e.g. haustorium from Ipomoea)
data_ipomoea$Tissue.code <- factor(data_ipomoea$Tissue.code, levels = c("l", "y", "o", "f", "s"))
Chl.a_ipomoea_boxplot <- ggplot(data_ipomoea_Chl.a, aes(x=Tissue.code, y=logFW.norm, color=Tissue.code)) +
scale_fill_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_color_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_x_discrete(name = "Tissue", labels = c("l" = "L", "y" = "Y", "o" = "O", "f" = "F", "s" = "Sd"), drop = FALSE) +
geom_boxplot(outlier.size = 0.1, lwd=0.2) +
theme_minimal() +
theme(text = element_text(size=10),
strip.text.x = element_text(angle=0, face = "bold"),
strip.text.y.left = element_text(angle = 0, face = "bold"),
axis.text.y = element_text(size = 5),
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 5),
legend.position = "none") +
ylab("Log10 ng/mg Fresh Weight") +
guides(colour = guide_legend(nrow = 1)) +
scale_y_continuous(position = "left", limits = c(0, 8), breaks = seq(0, 8, by = 2)) +
geom_text(
size    = 2,
color = "black",
data    = filter(dat_text_plot_kruskal, Pigment == "Chl.a" & Subgenus == "Ipomoea nil"),
inherit.aes = T,
mapping = aes(x = Inf, y = Inf, label = label, vjust = "top", hjust = "right"),
nudge_y = -.6, parse = TRUE)
dat_text_plot_kruskal <- read.csv(file = "../output/stat_results/dat_text_plot_kruskal.csv", row.names = F)
dat_text_plot_kruskal <- read.csv(file = "../output/stat_results/dat_text_plot_kruskal.csv")
View(dat_text_plot_kruskal)
#### Chl.a Ipomoea_nil ####
data_ipomoea <-  filter(data_long_calcs, Subgenus == "Ipomoea_nil")
data_ipomoea_Chl.a <- filter(data_ipomoea, Pigment == "Chl.a")
# drop unused factor levels from tissues (e.g. haustorium from Ipomoea)
data_ipomoea$Tissue.code <- factor(data_ipomoea$Tissue.code, levels = c("l", "y", "o", "f", "s"))
Chl.a_ipomoea_boxplot <- ggplot(data_ipomoea_Chl.a, aes(x=Tissue.code, y=logFW.norm, color=Tissue.code)) +
scale_fill_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_color_manual(name = "Tissue", labels = c("Leaf", "Young", "Old", "Flower", "Seed"),values = c("l" = leaf, "y" = young, "o" = old, "f" = flower, "s" = seed)) +
scale_x_discrete(name = "Tissue", labels = c("l" = "L", "y" = "Y", "o" = "O", "f" = "F", "s" = "Sd"), drop = FALSE) +
geom_boxplot(outlier.size = 0.1, lwd=0.2) +
theme_minimal() +
theme(text = element_text(size=10),
strip.text.x = element_text(angle=0, face = "bold"),
strip.text.y.left = element_text(angle = 0, face = "bold"),
axis.text.y = element_text(size = 5),
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 5),
legend.position = "none") +
ylab("Log10 ng/mg Fresh Weight") +
guides(colour = guide_legend(nrow = 1)) +
scale_y_continuous(position = "left", limits = c(0, 8), breaks = seq(0, 8, by = 2)) +
geom_text(
size    = 2,
color = "black",
data    = filter(dat_text_plot_kruskal, Pigment == "Chl.a" & Subgenus == "Ipomoea nil"),
inherit.aes = T,
mapping = aes(x = Inf, y = Inf, label = label, vjust = "top", hjust = "right"),
nudge_y = -.6, parse = TRUE)
Chl.a_ipomoea_boxplot
# use base R boxplot to get the coordinates of the boxes
box.rslt_Chl.a_ipomoea <- with(data_ipomoea_Chl.a, graphics::boxplot(logFW.norm ~ Tissue.code, plot = FALSE))
str(box.rslt_Chl.a_ipomoea)
boxplot_positions_Chl.a_ipomoea <- as.data.frame(box.rslt_Chl.a_ipomoea$stats)
# what are these column tissue codes?
tissues_Chl.a_ipomoea <- levels(data_ipomoea_Chl.a$Tissue.code)
# add appropriate tissues to position df
colnames(boxplot_positions_Chl.a_ipomoea) <- tissues_Chl.a_ipomoea
# fifth row of boxplot_positions gives the y coordinates for the tops of the whiskers
top_positions_Chl.a_ipomoea <- boxplot_positions_Chl.a_ipomoea[5,]
#add pairwise significance letter groups (compact letter display; CLD)
cbd_Chl.a_ipomoea <- as.data.frame(QsRutils::make_letter_assignments(wilcox_list[["Ipomoea_nil__Chl.a"]])[["Letters"]])
colnames(cbd_Chl.a_ipomoea)[1] <- "Letter"
# library(grid)
# library(gridtext)
# library(data.table)
# library(WRS2)
# library(data.table)
# install.packages("BiocManager")
# BiocManager::install("phyloseq")
# library(phyloseq)
# install.packages("devtools")
# devtools::install_github("jfq3/QsRutils", build_vignettes = TRUE)
library(QsRutils)
devtools::install_github("jfq3/QsRutils", build_vignettes = TRUE)
# library(GGally)
# library(gtools)
# library(patchwork)
# library(grid)
# library(gridtext)
# library(data.table)
# library(WRS2)
# library(data.table)
# install.packages("BiocManager")
# BiocManager::install("phyloseq")
library(phyloseq)
BiocManager::install("phyloseq")
# install.packages("BiocManager")
# BiocManager::install("phyloseq")
library(phyloseq)
BiocManager::install("phyloseq")
BiocManager::install("phyloseq")
here()
BiocManager::install("phyloseq")
BiocManager::install("phyloseq")
install.packages("classInt")
